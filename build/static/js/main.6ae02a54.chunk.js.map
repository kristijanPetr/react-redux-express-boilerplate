{"version":3,"sources":["constants.js","helpers/endpoints.js","components/Main/index.js","actions/index.js","App.js","reducers/reducer_user.js","reducers/index.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["FETCHING_USER","FETCHED_USER_SUCCESS","FETCHED_USER_FAILURE","SERVER_BASE_URL","concat","process","API_ENDPOINTS","TEST_API","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","logUser","state","flag","react_default","a","createElement","className","Component","connect","user","userObj","dispatch","getState","type","axios","get","then","resp","status","data","payload","catch","err","App","react_router_dom","react_router","path","component","initialState","isFetching","fetched","error","combineReducers","arguments","length","undefined","action","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAAaA,EAAgB,gBAChBC,EAAuB,uBACvBC,EAAuB,uBCF9BC,EAAe,oBAAAC,OAAuBC,QAO7BC,EAJO,CACpBC,SAAQ,GAAAH,OAAKD,EAAL,wBCEJK,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,mBAAqB,WACnBP,EAAKD,MAAMS,QAAQ,cALnBR,EAAKS,MAAQ,CACXC,MAAM,GAHSV,wEAUjB,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,yDAEAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,uBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,sBArBOC,aAiCJC,cALS,SAAAP,GACtB,MAAO,CACLQ,KAAMR,EAAMQ,OAKd,CAAET,QChCG,SAAiBU,GACtB,OAAO,SAACC,EAAUC,GAChBD,EAAS,CACPE,KAAM/B,IAGRgC,IACGC,IAAI3B,EAAcC,UAClB2B,KAAK,SAAAC,GACJ,OAAoB,MAAhBA,EAAKC,QAAkBD,EAAKE,KACvBR,EAAS,CACdE,KAAM9B,EACNqC,QAASV,IAGNC,EAAS,CACdE,KAAM7B,EACNoC,QAAS,gBAGZC,MAAM,SAAAC,GACL,OAAOX,EAAS,CACdE,KAAM7B,EACNoC,QAASE,SDOJd,CAGblB,GE5BaiC,mLARX,OACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWrC,YAJjBiB,6CCEZqB,EAAe,CACnBT,KAAM,KACNU,YAAY,EACZC,SAAS,EACTC,MAAO,MCRMC,cAAgB,CAC3BvB,KDUW,WAAkC,IAAjCR,EAAiCgC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EAAcQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAQC,EAAOvB,MACb,KAAK/B,EACH,MAAO,CAAEqC,KAAM,KAAMU,YAAY,EAAMC,SAAS,GAClD,KAAK/C,EACH,MAAO,CAAEoC,KAAMiB,EAAOhB,QAASS,YAAY,EAAOC,SAAS,GAC7D,KAAK9C,EACH,MAAO,CACLmC,KAAM,KACNU,YAAY,EACZC,SAAS,EACTC,MAAOK,EAAOhB,SAElB,QACE,OAAOnB,MEfOoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,ECHGC,YAAYC,EAAaC,YAAgBC,IAAMC,MDKxDC,IAASC,OACP9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAUR,MAAOA,GACfvC,EAAAC,EAAAC,cAAC8C,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.6ae02a54.chunk.js","sourcesContent":["export const FETCHING_USER = 'FETCHING_USER';\nexport const FETCHED_USER_SUCCESS = 'FETCHED_USER_SUCCESS';\nexport const FETCHED_USER_FAILURE = 'FETCHED_USER_FAILURE';\n","const SERVER_BASE_URL = `http://localhost:${process.env.REACT_APP_SERVER_PORT ||\n  5000}`;\n\nconst API_ENDPOINTS = {\n  TEST_API: `${SERVER_BASE_URL}/api/test`\n};\n\nexport default API_ENDPOINTS;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { logUser } from '../../actions';\n\nimport './index.css';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flag: false\n    };\n  }\n  componentWillMount = () => {\n    this.props.logUser('Test User');\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>React Express Boilerplate with preinstalled:</p>\n\n          <ul>\n            <li className=\"app-link\">1. Redux</li>\n            <li className=\"app-link\">2. Redux Thunk</li>\n            <li className=\"app-link\">3.Redux Logger</li>\n            <li className=\"app-link\">4. React Router Dom</li>\n            <li className=\"app-link\">5. Axios</li>\n          </ul>\n        </header>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\nexport default connect(\n  mapStateToProps,\n  { logUser }\n)(Main);\n","import axios from 'axios';\nimport {\n  FETCHING_USER,\n  FETCHED_USER_SUCCESS,\n  FETCHED_USER_FAILURE\n} from '../constants';\nimport API_ENDPOINTS from '../helpers/endpoints';\n\n// Example actions with thunk dispatch\nexport function logUser(userObj) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: FETCHING_USER\n    });\n\n    axios\n      .get(API_ENDPOINTS.TEST_API)\n      .then(resp => {\n        if (resp.status === 200 && resp.data) {\n          return dispatch({\n            type: FETCHED_USER_SUCCESS,\n            payload: userObj\n          });\n        }\n        return dispatch({\n          type: FETCHED_USER_FAILURE,\n          payload: 'API error'\n        });\n      })\n      .catch(err => {\n        return dispatch({\n          type: FETCHED_USER_FAILURE,\n          payload: err\n        });\n      });\n  };\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Main from './components/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" component={Main} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import {\n  FETCHING_USER,\n  FETCHED_USER_SUCCESS,\n  FETCHED_USER_FAILURE\n} from '../constants';\n\nconst initialState = {\n  data: null,\n  isFetching: false,\n  fetched: false,\n  error: null\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCHING_USER:\n      return { data: null, isFetching: true, fetched: false };\n    case FETCHED_USER_SUCCESS:\n      return { data: action.payload, isFetching: false, fetched: true };\n    case FETCHED_USER_FAILURE:\n      return {\n        data: null,\n        isFetching: false,\n        fetched: true,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport user from \"./reducer_user\";\nexport default combineReducers({\n    user\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport configureStore from './store/configureStore';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"../reducers\";\nexport default function configureStore() {\n  return createStore(rootReducer, applyMiddleware(thunk,logger));\n}\n"],"sourceRoot":""}